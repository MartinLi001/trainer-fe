import SeeButton from '@/components/SeeButton';
import { useUpdateEffect } from 'ahooks';
import { Form, Input, InputNumber, Modal, Radio, DatePicker } from 'antd';
import moment from 'moment';
import { useEffect, useMemo } from 'react';
const { TextArea } = Input;

interface EditProps {
  loading?: boolean;
  data: API.TaskType;
  visible: boolean;
  hideDateTime?: boolean;
  showAllFields?: boolean;
  onClose: () => void;
  onOk: (values: API.TaskType) => void;
}

const format = 'hh:mm:ss A YYYY/MM/DD';

// showAllFields 字段代表是否展示所有字段（lectrue，codingmock再task列表页不可以编辑某些字段，再详情页可以）
export default function EditModal({
  data,
  visible,
  loading,
  showAllFields = false,
  hideDateTime,
  onClose,
  onOk,
}: EditProps) {
  const [form] = Form.useForm();

  const duration = Form.useWatch('duration', form);

  useUpdateEffect(() => {
    form.setFieldValue('endDateTime', moment(data.startDateTime, format).add(duration, 'hours'));
  }, [duration]);

  // @ts-ignore
  const disabledStartDate: RangePickerProps['disabledDate'] = (current) => {
    return current && current < moment().startOf('day');
  };

  // @ts-ignore
  const disabledEndDate: RangePickerProps['disabledDate'] = (current) => {
    if (form.getFieldValue('startDateTime')) {
      return current < form.getFieldValue('startDateTime');
    }
    return current && current < moment().startOf('day');
  };

  const typeName = useMemo(() => {
    return data.type;
  }, [data]);

  useEffect(() => {
    if (data) {
      const temp = {
        ...data,
        startDateTime: moment(data.startDateTime),
        endDateTime: moment(data?.endDateTime),
      };
      form.setFieldsValue(temp);
    }
  }, [data]);

  const DurationItem = () => (
    <Form.Item name="duration" label={`${typeName} Duration(hr)`} rules={[{ required: true }]}>
      <InputNumber min={1} />
    </Form.Item>
  );

  const StartDateItem = () => (
    <Form.Item
      name="startDateTime"
      label={`${typeName} Start Time`}
      rules={[{ required: true, message: 'Please select the Start Date' }]}
    >
      {/*  @ts-ignore */}
      <DatePicker
        showTime
        style={{ width: 254 }}
        format={format}
        disabledDate={disabledStartDate}
        placeholder="Choose start time"
      />
    </Form.Item>
  );

  const EndDateItem = () => (
    <Form.Item
      name="endDateTime"
      label={
        <>
          {`${typeName} End Time`}
          <span style={{ color: '#8FCE28', fontSize: 16, fontWeight: 400 }}>
            (generated by duration)
          </span>
        </>
      }
      rules={[
        { required: true, message: 'Please select the End Date' },
        ({ getFieldValue }) => ({
          validator(_, value) {
            if (value < getFieldValue('startDate') && _) {
              return Promise.reject(new Error(`end date can't be null or before start date`));
            }
            return Promise.resolve();
          },
        }),
      ]}
    >
      {/*  @ts-ignore */}
      <DatePicker
        showTime
        // showTime={{ format: 'HH' }}
        style={{ width: 254 }}
        format={format}
        disabledDate={disabledEndDate}
        placeholder="Choose end time"
      />
    </Form.Item>
  );

  const renderFormItem = () => {
    if (hideDateTime) return <></>;

    if (['Assignment', 'Project'].includes(typeName)) {
      if (data.isLocked) {
        return <DurationItem />;
      }

      return (
        <>
          <StartDateItem />
          <EndDateItem />
        </>
      );
    }

    if (!data.isLocked) return <StartDateItem />;

    return null;
  };

  return (
    <Modal
      title={`Edit ${typeName}`}
      open={visible}
      width={600}
      onCancel={() => {
        form.resetFields();
        onClose();
      }}
      afterClose={() => form.resetFields()}
      destroyOnClose
      footer={[
        <SeeButton type="ghost" key="cancel" onClick={() => onClose()}>
          Cancel
        </SeeButton>,
        <SeeButton
          type="primary"
          key="save"
          loading={loading}
          onClick={() =>
            form
              .validateFields()
              .then((values) => {
                if (values.endDateTime && values.startDateTime)
                  values.duration = moment(values.endDateTime).diff(values.startDateTime, 'h');
                onOk(values);
              })
              .catch((info) => {
                console.log('Validate Failed:', info);
              })
          }
        >
          Save
        </SeeButton>,
      ]}
    >
      <Form form={form} layout="vertical">
        <Form.Item
          name="name"
          label={`${typeName} Name`}
          rules={[{ required: true, message: 'Please input the Task Name' }]}
        >
          <Input placeholder={`${typeName} Name`} />
        </Form.Item>

        <Form.Item
          name="description"
          rules={[
            {
              required: true,
              message: '',
            },
            () => ({
              validator(_, value) {
                if (!value.replace(' ', '')) {
                  return Promise.reject(new Error('Please input the Task Description'));
                }
                return Promise.resolve();
              },
            }),
          ]}
          label={`${typeName} Description`}
        >
          <TextArea rows={4} placeholder={`${typeName} Description`} />
        </Form.Item>

        <Form.Item
          name="priority"
          label="Priority"
          initialValue={1}
          rules={[
            {
              required: true,
              message: 'Priority should be greater than 0',
            },
          ]}
        >
          <InputNumber min={1} />
        </Form.Item>

        {renderFormItem()}

        {showAllFields ? (
          <>
            {/* {typeName === 'Lecture' ? (
              <Form.Item name="goal" label={`${typeName} Goal`}>
                <Input placeholder="i.e. familiarize with the basic concepts" />
              </Form.Item>
            ) : null} */}

            {['Lecture', 'CodingMock'].includes(typeName) ? (
              <Form.Item name="meetingLink" label="Meeting Link">
                <Input placeholder="i.e. familiarize with the basic concepts" />
              </Form.Item>
            ) : null}
          </>
        ) : (
          ''
        )}

        {['Assignment', 'Project'].includes(typeName) ? (
          <Form.Item name="enableLateSubmission" label="Late Submission" initialValue={false}>
            <Radio.Group>
              <Radio value={true}> Allow </Radio>
              <Radio value={false}> Forbidden </Radio>
            </Radio.Group>
          </Form.Item>
        ) : null}

        <Form.Item name="type" label="type" hidden>
          <Input placeholder="type" />
        </Form.Item>

        {/* {['CodingMock'].includes(typeName) ? (
          <Form.Item hidden name="status" label="status" initialValue="Created">
            <Input placeholder="status" />
          </Form.Item>
        ) : null} */}
      </Form>
    </Modal>
  );
}
